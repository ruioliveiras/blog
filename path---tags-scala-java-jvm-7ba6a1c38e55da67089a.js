webpackJsonp([0xd73acfab3a96],{494:function(n,a){n.exports={pathContext:{tags:["Scala, Java & JVM","pinned"],tag:[{excerpt:"Runtime JVM Bytecode manipulation Java and Scala and other languages that compiles to JVM,  are more dynamic that you may thing . As you already know Java and Scala compiles to JVM Bytecode. And this bytecode that probably scares you\nis easy that you…",html:'<h1 id="runtime-jvm-bytecode-manipulation"><a href="#runtime-jvm-bytecode-manipulation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Runtime JVM Bytecode manipulation</h1>\n<p>Java and Scala and other languages that compiles to JVM, <strong>are more dynamic that you may thing</strong>.</p>\n<p>As you already know Java and Scala compiles to JVM Bytecode. And this bytecode that probably scares you\nis easy that you may thing. I will not explain it on this post, but lets take a look.</p>\n<h2 id="jvm-bytecode-overview"><a href="#jvm-bytecode-overview" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>JVM ByteCode Overview</h2>\n<p>The Full spessification can be found on the <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/">Oracle, Chapter 2. The Structure of the Java Virtual Machine</a></p>\n<ul>\n<li>\n<p>Each java class or scala class will create a <em>‘.class’</em> file.\nNote, in Scala each Lamda function will create  each own .class file, this is just a trick of the Scala compiler.</p>\n</li>\n<li>\n<p>A good way to understed the data releated to each ‘.class’ is with ASM:</p>\n<ul>\n<li>in the java ASM guide, go to section 2.1, Class / Structure  </li>\n</ul>\n</li>\n<li>\n<p>Primitive types and Reference types,</p>\n<ul>\n<li>in the JVM there exist two kind of types primitives and references.</li>\n</ul>\n</li>\n<li>\n<p>Method Call Example\nOriginal Code</p>\n<div class="gatsby-highlight">\n      <pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span>Example a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ola"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The ASM code, you can generate something like this using ASMifier.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code>mv<span class="token punctuation">.</span>visitVarInsn<span class="token punctuation">(</span>ALOAD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token comment">//stack [this]</span>\nmv<span class="token punctuation">.</span>visitVarInsn<span class="token punctuation">(</span>ALOAD<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// put the first argument in the stack</span>\n<span class="token comment">// stack:[this, &lt;1º argument>]</span>\nmv<span class="token punctuation">.</span>visitLdcInsn<span class="token punctuation">(</span><span class="token string">"ola"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// stack:[this, &lt;1º argument>, "ola"]</span>\nmv<span class="token punctuation">.</span>visitMethodInsn<span class="token punctuation">(</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"com/Example"</span><span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)Ljava/lang/Object;"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// will call method &lt;1º argument>.get("ola")</span>\n<span class="token comment">// stack:[this, &lt;result of get method>]</span>\nmv<span class="token punctuation">.</span>visitTypeInsn<span class="token punctuation">(</span>CHECKCAST<span class="token punctuation">,</span> <span class="token string">"java/lang/String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmv<span class="token punctuation">.</span>visitMethodInsn<span class="token punctuation">(</span>INVOKEVIRTUAL<span class="token punctuation">,</span> <span class="token string">"com/Main"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)Ljava/lang/String;"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Stack: [&lt;the result of hello>]</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Instantiate new Varible</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code>mv<span class="token punctuation">.</span>visitTypeInsn<span class="token punctuation">(</span>NEW<span class="token punctuation">,</span> <span class="token string">"com/Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// stack: [newObjReference ]</span>\nmv<span class="token punctuation">.</span>visitInsn<span class="token punctuation">(</span>DUP<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// duplicate the top of the stack</span>\n<span class="token comment">// stack: [newObjReference , newObjReference  ]</span>\n<span class="token comment">// local variable access, the initialization was omitted</span>\nmv<span class="token punctuation">.</span>visitVarInsn<span class="token punctuation">(</span>ALOAD<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// stack: [newObjReference , newObjReference, localVariable2 ]</span>\nmv<span class="token punctuation">.</span>visitVarInsn<span class="token punctuation">(</span>ALOAD<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// stack: [newObjReference , newObjReference, localVariable2,  localVariable3 ]</span>\nmv<span class="token punctuation">.</span>visitVarInsn<span class="token punctuation">(</span>ALOAD<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// stack: [newObjReference , newObjReference, localVariable2,  localVariable3, localVariable4 ]</span>\nmv<span class="token punctuation">.</span>visitMethodInsn<span class="token punctuation">(</span>INVOKESPECIAL<span class="token punctuation">,</span> <span class="token string">"com/Hello"</span><span class="token punctuation">,</span> <span class="token string">"&lt;init>"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// call the constructor, the constructor is a special method called &lt;init></span>\n</code></pre>\n      </div>\n</li>\n</ul>\n<h2 id="java-class-loader"><a href="#java-class-loader" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Java class-loader</h2>\n<p>How this ‘.class’ files with byte code inside are loaded by the JVM? The answer is by the <strong>classLoader.</strong></p>\n<p>On any object, you can do <code>.getClass()</code> this is the runtime representation of the Class. An if you pay attention that <code>Class</code> object has a method <code>.getClassLoader()</code>.</p>\n<p><a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html">ClassLoader in the oracle documentation</a></p>\n<p>The most incredible thing is that you use custom class-loader to for example load <code>.jar</code> into your application in runtime <a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLClassLoader.html%22%3EuriClassLoader">URLClassLoader</a>. Or store your <code>.class</code> in a <a href="https://github.com/RGBz/aws-s3-class-loader">S3 class loader</a></p>\n<h2 id="bytecode-manipulation-tools"><a href="#bytecode-manipulation-tools" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bytecode manipulation tools</h2>\n<ul>\n<li>\n<p><strong>Java ASM</strong> <a href="http://asm.ow2.org">http://asm.ow2.org</a> - it is very flexible you can do almost everything.\nFrom change existing .class to create new .class, to just analysis the code.\nIt has a nice <a href="http://download.forge.objectweb.org/asm/asm4-guide.pdf">guide</a>.</p>\n<p>Also it includes a tool (ASMifier) that inspect a class and generate the source\ncode to create the provided class in runtime. This is very useful for debug proposes</p>\n</li>\n<li>\n<p><strong>ByteBuddy</strong> <a href="http://bytebuddy.net/#/">bytebuddy.net</a> - is a easy way to manipulate class.\nIt is just possible to do some common use-cases, like for example fields manipulation, create mocks, proxies, etc..\nIt has a very simple interface and does not require an understanding of Java byte code.</p>\n</li>\n<li>\n<p>** Janino ** <a href="http://janino-compiler.github.io/janino/">janino-compiler.github.io/janino/</a> - Janino is a ligth-weigh runtime Java compiler. It can create bytecode in runtime, you write a string with valid Java Code and Janino will create the bytecode.\njanino does not implement all the Java features, but just the sufficient.\nIt is way more easy to write Java code and compile it using Janino than create the same code with ASM.</p>\n</li>\n</ul>\n<p>  The uses-cases of something like that are unlimited, use your imagination!!  </p>',id:"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2017-02-10-jvm-bytecode/index.md absPath of file >>> MarkdownRemark",timeToRead:4,frontmatter:{date:"January 10, 2017",draft:!1,path:"/jvm-bytecode",tags:["Scala, Java & JVM"],title:"JVM Bytecode"}},{excerpt:"Scala Language Tutorial Hot links Scala Oficial:  http://www.scala-lang.org Nice post:  http://lampwww.epfl.ch/~michelou/scala/using-scala-from-java.html How Install :  http://www.scala-lang.org/download/install.html  ; It is just: Download scala…",html:'<h1 id="scala-language-tutorial"><a href="#scala-language-tutorial" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scala Language Tutorial</h1>\n<h4 id="hot-links"><a href="#hot-links" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hot links</h4>\n<p>Scala Oficial: <a href="http://www.scala-lang.org">http://www.scala-lang.org</a></p>\n<p>Nice post: <a href="http://lampwww.epfl.ch/~michelou/scala/using-scala-from-java.html">http://lampwww.epfl.ch/~michelou/scala/using-scala-from-java.html</a></p>\n<p><strong>How Install</strong>: <a href="http://www.scala-lang.org/download/install.html">http://www.scala-lang.org/download/install.html</a> ;</p>\n<p>It is just:</p>\n<ol>\n<li>Download scala</li>\n<li>Crete path variable $SCALA_HOME </li>\n<li>Update the variable $PATH to have the $SCALA_HOME/bin\nAnd you have the ‘scala’ command wich gives you a Scala intepretor</li>\n</ol>\n<p><strong>Scala Ide</strong>: <a href="http://scala-ide.org">http://scala-ide.org</a>\n(an easy way to install and work with scala)</p>\n<p><strong>SBT</strong>: <a href="http://www.scala-sbt.org/">http://www.scala-sbt.org/</a>\nIs the scala build tool which manage dependencies. Sbt is for scala like Maven is for JAVA.</p>\n<h2 id="introduction"><a href="#introduction" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>\n<p>I will start with some generic concepts (<a href="#mutability-ummitability">Mutability and Immutability</a> and <a href="#singleton">Singleton object</a>) that are not specific of the scala language.</p>\n<p>Next, I have separated the main features in 3 Charters:  <a href="#scala-oo">Scala as a Object Oriented Language</a>, <a href="#scala-functional">Scala as a Functional language</a>, <a href="#scala-script">Scala as a Script language</a>.\nI like to say that scala was the qualities of all kind paradigms.\nIt is possible to take advantage of each paradigm.</p>\n<p>In the future I would like to pick some other topic: Reflection and Macros - this two things are still currently in experimental, but they are very cool and usable;\nConcurrency  which in Scala is very intuitive;\nNative XML scala feature;\nand notes about string processing. </p>\n<p>This tutorial is currently beeing writed in my free times, so in the end there are some topics which are not writed yet .</p>\n<h2 id="scala-ecosystem"><a href="#scala-ecosystem" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scala Ecosystem</h2>\n<p>Tools</p>\n<p><a name="concepts"></a></p>\n<h2 id="concepts"><a href="#concepts" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concepts</h2>\n<p>Before we get started, we must know about a few general concepts.\nConcepts that are not specific from the Scala language but general from the programming.\nBut where in Scala they are more used or has more importance.</p>\n<p><a name="mutability-ummitability"></a></p>\n<h3 id="mutability-and-immutability"><a href="#mutability-and-immutability" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mutability and Immutability</h3>\n<p>Immutability is one of pillars of a functional language.</p>\n<p>** Mutable variable ** its state can change over time.</p>\n<p>** Immutable variable ** its state can’t change over time.</p>\n<p>Immutability advantages</p>\n<ul>\n<li>Is very good for concurrency (many threads changing the value of one variable at same time may be dangerous )</li>\n<li>Code more clean</li>\n</ul>\n<p>Immutability disadvantages</p>\n<ul>\n<li>May be  costly to be recreating objects on each change</li>\n</ul>\n<p><a name="singleton"></a></p>\n<h3 id="singleton-object"><a href="#singleton-object" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Singleton object</h3>\n<p>Singleton objects are unique at the runtime. There will not exist at same time two instances of this objects types.</p>\n<p>In Java, a class have its own static scope, where are declared static methods and variables. This static scope of the class, in java, are nothing more that a built-in singleton object</p>\n<p>But in Scala there aren’t the keyword static.\nInstead there are classes and singleton objects, they are managed differently.</p>\n<p><a name="scala-oo"></a></p>\n<h2 id="scala-as-a-object-oriented-language"><a href="#scala-as-a-object-oriented-language" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scala as a Object Oriented Language</h2>\n<p>In Scala you can do everything that you already could do in JAVA, or in other Object oriented language.\nThe main difference could be that in Scala there aren’t static scope variables. But an equivalent thing:\nIf you need a static variable for the class A, you create an object A in the same file, and place\nthe variable there. </p>\n<p><a name="objects-class"></a></p>\n<h3 id="objects-and-class"><a href="#objects-and-class" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Objects and Class</h3>\n<p><strong>Class</strong>: is equivalent to Java. </p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// declaring a class you can create a default constructor. This constructor </span>\n<span class="token comment">// define the constructor arguments and class Attribute at same time. </span>\n<span class="token keyword">class</span> Example<span class="token punctuation">(</span>favoriteNumber<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//  an attribute</span>\n<span class="token keyword">private</span> <span class="token keyword">val</span> dadFavoriteNumber<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token operator">=</span> favoriteNumber <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token comment">// defining other constructor, on this case calling the default constructor</span>\n<span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>favoriteNumber<span class="token operator">:</span><span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">(</span>favoriteNumber<span class="token punctuation">.</span>toInt<span class="token punctuation">,</span> <span class="token string">"default-name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// defining a method without arguments with Int Return</span>\n<span class="token keyword">def</span> dadNumber<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Int</span> <span class="token operator">=</span> dadFavoriteNumber\n<span class="token comment">// this is equivalent to</span>\n<span class="token comment">// def dadNumber():Int = {return dadFavoriteNumber; }</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// instantiating with firt constructor</span>\n<span class="token keyword">new</span> Example<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ruiOliveira"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dadNumber<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// instantiating with second constructor</span>\n<span class="token keyword">new</span> Example<span class="token punctuation">(</span><span class="token number">2l</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dadNumber<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 2l -> is a scala way to create Longs</span>\n</code></pre>\n      </div>\n<p>Run scala intepretor in the shell (command ‘scala’), and copy-paste this code and test.</p>\n<p><strong>Object</strong>: is a tool that can be used in different situations.\nOne used situation is to work has a singleton, as you can see:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// (Requires the Example class definition in the intepretor)</span>\n\n<span class="token comment">// a singleton object </span>\n<span class="token keyword">object</span> Example<span class="token punctuation">{</span>\n<span class="token comment">// This variable can be seen has a static variable in Example </span>\n<span class="token keyword">var</span> counter<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">10</span>\n<span class="token comment">// this method can be seend has a Static method in the Example</span>\n<span class="token keyword">def</span> counterPlusOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Int</span> <span class="token operator">=</span><span class="token punctuation">{</span> counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> counter <span class="token punctuation">}</span>  \n<span class="token comment">// On this method we are creating a variable of class Example and using </span>\n<span class="token comment">// the object Example. The compiler is very smart, and they know when </span>\n<span class="token comment">// you are using the Class or when you are using the Object. Even if </span>\n<span class="token comment">// they have the same name.</span>\n<span class="token keyword">def</span> newExample<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">new</span> Example<span class="token punctuation">(</span>Example<span class="token punctuation">.</span>counterPlusOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">val</span> ro1 <span class="token operator">=</span> Example<span class="token punctuation">.</span>newExample<span class="token punctuation">(</span><span class="token string">"Rui Oliveira 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nro1<span class="token punctuation">.</span>dadNumber<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> ro2 <span class="token operator">=</span> Example<span class="token punctuation">.</span>newExample<span class="token punctuation">(</span><span class="token string">"Rui Oliveira 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nro2<span class="token punctuation">.</span>dadNumber<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> ro3 <span class="token operator">=</span> Example<span class="token punctuation">.</span>newExample<span class="token punctuation">(</span><span class="token string">"Rui Oliveira 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nro3<span class="token punctuation">.</span>dadNumber<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// the dadNumber is growing, </span>\n</code></pre>\n      </div>\n<p>Run scala intepretor in the shell (command ‘scala’), and copy-paste this code.</p>\n<p>In scala a class don’t have static methods or variables, what you can do is create a Object with the same name of the class, this object is called <strong>Companion object</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// The class</span>\n<span class="token keyword">class</span> TheClass\n<span class="token comment">// The companion object</span>\noject TheClass\n<span class="token comment">// PERSONAL NOTE: need intepretor validation</span>\n</code></pre>\n      </div>\n<p><a name="traits"></a></p>\n<h3 id="traits"><a href="#traits" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Traits</h3>\n<p>A trait is a <strong>tool</strong>, a tool that can be compared to a JAVA interface. With the different\nthat you can have method implementations and variable initialization.</p>\n<p>After the compilation, as trait is nothing more that a interface for the JVM.\nSo the definitions of the method and variable will be the in the class that uses the trait.</p>\n<p><strong>Creating a Trait</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">trait</span> Person<span class="token punctuation">{</span>\n<span class="token comment">//who use this trait must define a value Name with type String</span>\n<span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> nameCounter <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">def</span> getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\nnameCounter <span class="token operator">+=</span> <span class="token number">1</span>\n<span class="token comment">// value name is the last thing of this block so will be returned </span>\n<span class="token comment">// Keep this in mind, scala don\'t require return keyword </span>\nname\n<span class="token punctuation">}</span>\n\n<span class="token keyword">def</span> howManyTimesNameWasCalled<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> nameCounter\n<span class="token punctuation">}</span>\n<span class="token comment">// you can create an object with the same name has the trait</span>\n<span class="token keyword">object</span> Person<span class="token punctuation">{</span>\n  <span class="token comment">// you can variables of a spessfic Trait</span>\n  <span class="token keyword">def</span> testTraitPerson<span class="token punctuation">(</span>p<span class="token operator">:</span>Person<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\nprintln<span class="token punctuation">(</span>p<span class="token punctuation">.</span>howManyTimesNameWasCalled<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\np<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span>\nprintln<span class="token punctuation">(</span>p<span class="token punctuation">.</span>howManyTimesNameWasCalled<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  \n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong>Object using a Trait</strong>, note that we are defining name value.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">object</span> RuiOliveira <span class="token keyword">extends</span> Person<span class="token punctuation">{</span>\n<span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"rui Oliveira"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nPerson<span class="token punctuation">.</span>testTraitPerson<span class="token punctuation">(</span>RuiOliveira<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Has you can see a object is a variable that uses Person so it can be used in the testTraitPerson</p>\n<p><strong>Class using a trait</strong>, note that we are declaring value ‘name’ in the constructor parameters.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">class</span> OtherPerson<span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Person\n\n<span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token keyword">new</span> OtherPerson<span class="token punctuation">(</span><span class="token string">"pedro"</span><span class="token punctuation">)</span>\nPerson<span class="token punctuation">.</span>testTraitPerson<span class="token punctuation">(</span>p<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Has was expected we can use traits in class’s</p>\n<p><strong>Trait on variable</strong>. (Anonymous declaration) </p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// Dog are not Persons, so it don\'t extends to trait Person</span>\n<span class="token keyword">class</span> Dog<span class="token punctuation">(</span><span class="token keyword">val</span> dogName<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span>\n\n<span class="token comment">// but this specialDog are a Person, its type is \'Dog with Person\'</span>\n<span class="token keyword">val</span> specialDog<span class="token operator">:</span>Dog <span class="token keyword">with</span> Person <span class="token operator">=</span> <span class="token keyword">new</span> Dog<span class="token punctuation">(</span><span class="token string">"doggy"</span><span class="token punctuation">)</span> <span class="token keyword">with</span> Person <span class="token punctuation">{</span>\n<span class="token keyword">val</span> name <span class="token operator">=</span> dogName<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nPerson<span class="token punctuation">.</span>testTraitPerson<span class="token punctuation">(</span>p<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><a name="case-class"></a></p>\n<h3 id="case-class"><a href="#case-class" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Case Class</h3>\n<p>Case class are a “modification” to normal classes</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// normal class</span>\n<span class="token keyword">class</span> Onwer<span class="token punctuation">(</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> Phone<span class="token punctuation">(</span> number<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span>  owner<span class="token operator">:</span>Onwer<span class="token punctuation">)</span>\n<span class="token comment">// case class</span>\n<span class="token keyword">case</span> <span class="token keyword">class</span> Owner2<span class="token punctuation">(</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span>\n<span class="token keyword">case</span> <span class="token keyword">class</span> Phone2<span class="token punctuation">(</span> number<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> owner<span class="token operator">:</span>Owner2<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Creating a case class you will be access:</p>\n<ul>\n<li>default create functions: toString, copy, equal and hashcode.</li>\n<li>class will be immutable by default</li>\n<li>default create singleton object with method unapplay and apply functions</li>\n</ul>\n<p><a name="apply-unapply"></a></p>\n<h3 id="methods-apply-and-unapply"><a href="#methods-apply-and-unapply" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods <code>apply</code> and <code>unapply</code></h3>\n<p>The methods <code>apply</code> and <code>unapply</code> are created in the companion object</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">case</span> <span class="token keyword">class</span> Person<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span>\n\n<span class="token keyword">object</span> Person <span class="token punctuation">{</span>\n  <span class="token comment">// methods create automaticly by case class:</span>\n  <span class="token comment">// def apply(name:String) = new Person(name)</span>\n  <span class="token comment">// def unapply()</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">// NEED intrepretor vadidation</span>\n</code></pre>\n      </div>\n<p>!explain !\n!Here explain the power of unapplay and apply!</p>\n<p><a name="generic-class"></a></p>\n<h3 id="generic-class"><a href="#generic-class" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Generic Class</h3>\n<h3 id="inner-class-and-object"><a href="#inner-class-and-object" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Inner Class and Object</h3>\n<p><a name="scala-functional"></a></p>\n<h2 id="scala-as-a-functional-language"><a href="#scala-as-a-functional-language" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scala as a Functional language</h2>\n<p>On this section, there will be explained some of the Scala features that are related to Functional World:</p>\n<ul>\n<li>var and val (Mutability and Immutability)</li>\n<li>Lambda functions</li>\n<li>handling collection in a functional way</li>\n<li>implicit things (variable, method and class) </li>\n</ul>\n<p><a name="var-val"></a></p>\n<h3 id="var-and-val"><a href="#var-and-val" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Var and Val</h3>\n<p>Var and Val keyword can be used to declare objects or in class parameter.</p>\n<p><strong>var</strong> stands for variable\n<strong>val</strong> stands for value</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">val</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n\n<span class="token keyword">while</span><span class="token punctuation">(</span>counter <span class="token operator">&lt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token comment">// in scala there aren\'t ++ operator</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>On this example counter variable are being setted multiple times. While if you try to set a new value in the counter, it will gives you a compile error.</p>\n<p>Usage on as a class parameter:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">class</span> Person<span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">def</span> doBirthdate<span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span> age <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The parameter name will never got changed while age can be changed.</p>\n<p>Var and Val with class types</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">class</span> Club<span class="token punctuation">(</span><span class="token keyword">val</span> peopleList<span class="token operator">:</span>List<span class="token punctuation">[</span>Person<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">val</span> owner<span class="token operator">:</span>Person<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>On this example we have the owner parameter as val, but this don’t mean that we cannot use ‘onwer.doBirthdate’ and change the state of owner.\nWhen we set a parameter has val, we are telling the compiler that the ‘symbol’ named ‘owner’ will only be setted one time.</p>\n<p>We say that a class is Immutable when all the parameters are ‘val’ and all the parameters Types are also immutable.</p>\n<p><a name="higter-order"></a></p>\n<h3 id="lambda-functions"><a href="#lambda-functions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lambda functions</h3>\n<p>The syntax to create a lambda function are:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">val</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x<span class="token operator">*</span><span class="token number">2</span>\nf<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> \n<span class="token comment">// will give 4</span>\n</code></pre>\n      </div>\n<p>We can receive function as parameter</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">val</span> op1 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> y\n<span class="token keyword">val</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> op<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">=></span> op<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>\nf<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>op1<span class="token punctuation">)</span> \n<span class="token comment">// will give 7</span>\n</code></pre>\n      </div>\n<p><a name="collections-functions"></a></p>\n<h3 id="collections-functions"><a href="#collections-functions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Collections functions</h3>\n<p>To know more Collectons, check the Collection section. On this sub-section I will only\nexplain the functinal approuch of the Collections</p>\n<p><strong>Map</strong> Transforming a List into an other list with an operation</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">val</span> l<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">val</span> op <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> x <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token comment">// running the operation \'op\' over each element </span>\n<span class="token keyword">val</span> l2<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>map<span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// l2 will have: List(2,4,6,8)</span>\n<span class="token comment">// l1 will keep the List(1,2,3,4)</span>\n</code></pre>\n      </div>\n<p>With some systatix sugar (which i’m gooing to explain in [ref section3]).\nWe can simplie write</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">val</span> l<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">val</span> l2<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token keyword">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">val</span> l3<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>map<span class="token punctuation">{</span> x <span class="token keyword">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">val</span> l4<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">val</span> l5<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// l2, l3, l4, l5 are exatly the same</span>\n</code></pre>\n      </div>\n<p>** Filter ** will select some elements</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">val</span> l<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">val</span> l2 <span class="token operator">=</span> l<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>x <span class="token keyword">=></span> x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token comment">// 1º map result List(2,4,6,8)</span>\n<span class="token comment">// 2º filter result List(6,8)</span>\n<span class="token comment">// final result List(7,8)</span>\n</code></pre>\n      </div>\n<p>** Useful functions ** there are many useful functions over collections.\n<put here some examples></p>\n<p>** reduce ** will transform a list[A] into an A, this method assumes that the List,\nare not empty.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// Lets see the reduce signure:</span>\n<span class="token keyword">def</span> reduce<span class="token punctuation">[</span>A1 <span class="token operator">></span><span class="token operator">:</span> A<span class="token punctuation">]</span><span class="token punctuation">(</span>op<span class="token operator">:</span> <span class="token punctuation">(</span>A1<span class="token punctuation">,</span> A1<span class="token punctuation">)</span> ⇒ A1<span class="token punctuation">)</span><span class="token operator">:</span> A1\n<span class="token comment">// ...</span>\n<span class="token keyword">val</span> l<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nl<span class="token punctuation">.</span>reduce<span class="token punctuation">{</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>\n<span class="token comment">// will give 9</span>\nList<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduce<span class="token punctuation">{</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">=></span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>\n<span class="token comment">// empty list will throw excepton!!</span>\n</code></pre>\n      </div>\n<p>** foldRight and foldLeft ** is like reduce, but more useful.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// Lets see the signures:</span>\n<span class="token keyword">def</span> foldRight<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>z<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">(</span>op<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> ⇒ B<span class="token punctuation">)</span><span class="token operator">:</span> B\n<span class="token comment">// will produce something like \'op(x_1, op(x_2, ... op(x_n, z)...))\'</span>\n<span class="token keyword">def</span> foldLeft<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>z<span class="token operator">:</span> B<span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span> ⇒ B<span class="token punctuation">)</span><span class="token operator">:</span> B\n<span class="token comment">// will produce something like \'op(...op(z, x_1), x_2, ..., x_n)\'</span>\n</code></pre>\n      </div>\n<p>With the fold we can transform a list into objects, example:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">val</span> l<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nl<span class="token punctuation">.</span>foldLeft<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>z<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span> i<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> z <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span>  i<span class="token punctuation">.</span>toString <span class="token punctuation">}</span>\n<span class="token comment">// will produce 0,1,2,3,4</span>\n<span class="token comment">// op(op(op(op("0", 1), 2 ), 3), 4)</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">val</span> l<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nl<span class="token punctuation">.</span>foldRight<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>i<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> z<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">=></span> z <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> i<span class="token punctuation">.</span>toString  <span class="token punctuation">}</span>\n<span class="token comment">// will produce 0,4,3,2,1</span>\n<span class="token comment">// op(1,op(2,op(3,op(4,"0"))))</span>\n</code></pre>\n      </div>\n<p><a name="-implicit-variable"></a></p>\n<h3 id="implicit-variable"><a href="#implicit-variable" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implicit Variable</h3>\n<p>Implicit variables are a mechanism to avoid always be passing some variable into a function, normally this is very useful on recursive functions.</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token comment">// also on this example we are using Scala string processing</span>\n<span class="token keyword">def</span> f<span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> location<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> s<span class="token string">"hello $name, you are at $location"</span>\n<span class="token keyword">implicit</span>  <span class="token keyword">val</span> l <span class="token operator">=</span> <span class="token string">"lisbon"</span>\nf<span class="token punctuation">(</span><span class="token string">"rui"</span><span class="token punctuation">)</span>\n<span class="token comment">// will give \'hello rui, you are at lisbon\'</span>\nf<span class="token punctuation">(</span><span class="token string">"rui"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"porto"</span><span class="token punctuation">)</span>\n<span class="token comment">// will give \'hello rui, you are at porto\'</span>\n</code></pre>\n      </div>\n<p>The value l is been declared as implicit of type String, when ever its needed a Implicit String the value l will be used.</p>\n<p>We can import implicit variable and use in other context:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">object</span> o1<span class="token punctuation">{</span> <span class="token keyword">implicit</span> <span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">}</span>\n<span class="token keyword">def</span> f<span class="token punctuation">(</span><span class="token keyword">implicit</span> h<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token comment">// importing the variable i</span>\n<span class="token keyword">import</span> o1<span class="token punctuation">.</span>_\n<span class="token comment">// we are calling the function f (no parentheses need)</span>\n<span class="token comment">// and with the result call toString</span>\nprintf<span class="token punctuation">(</span>f<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Also we can have more than one variable as implicit input:</p>\n<div class="gatsby-highlight">\n      <pre class="language-scala"><code><span class="token keyword">def</span> f<span class="token punctuation">(</span>i<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> k<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> s<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">String</span> <span class="token operator">=</span> i <span class="token keyword">match</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">0</span> <span class="token keyword">=></span> s <span class="token operator">+</span> k\n  <span class="token keyword">case</span> _ <span class="token keyword">=></span> f<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">implicit</span> <span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">implicit</span> <span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token string">"i has "</span><span class="token punctuation">;</span>\nf<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p><a name="-implicit-method"></a></p>\n<h3 id="implicit-method"><a href="#implicit-method" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implicit Method</h3>\n<p>Implicit methods are used to convert a variable into other</p>\n<p><a name="-implicit-class"></a></p>\n<h3 id="implicit-class"><a href="#implicit-class" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Implicit Class</h3>\n<p>Implicit class are used to lay methods in certain types</p>\n<p><a name="scala-script"></a></p>\n<h2 id="scala-as-a-script-language"><a href="#scala-as-a-script-language" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Scala as a Script language</h2>\n<p>WARNING: Not writed yet\nTODO: write this topic.</p>\n<p><a name="type-inference"></a></p>\n<h3 id="type-inference"><a href="#type-inference" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Type Inference</h3>\n<p>WARNING: Not writed yet\nTODO: write this topic.</p>\n<p><a name="syntax-sugar"></a></p>\n<h3 id="syntax-sugar"><a href="#syntax-sugar" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Syntax Sugar</h3>\n<p>WARNING: Not writed yet\nTODO: write this topic.</p>\n<!---\n\n# ,"#scala-concurrency":{"title":"Scala Concurrency","sub":{"#futures-promises":{"title":"Futures and Promises"},"#todo":{"title":"todo: add topics here"}}},"#scala-reflection":{"title":"Scala Reflection","sub":{"#universe":{"title":"Universe"},"#todo2":{"title":"Add something here"}}},"#scala-macros":{"title":"Scala Macros","sub":{"#whitebox-blackbox":{"title":"Whitebox and blackbox macros"},"#annotations-macros":{"title":"Annotations Macros"}}},"#scala-xml":{"title":"Scala XML"},"#scala-string":{"title":"Scala String Processing"}   }\n \n# <a name="scala-cool"></a>\n# ## Scala as a cool language\n#\n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="scala-concurrency"></a>\n# ### Scala Concurrency\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="futures-promises"></a>\n# #### Futures and Promises\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="todo"></a>\n# #### @todo: add topics here\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="scala-reflection"></a>\n# ### Scala Reflection\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="universe"></a>\n# #### Universe\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="todo2"></a>\n# #### Add something here\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="scala-macros"></a>\n# ### Scala Macros\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="whitebox-blackbox"></a>\n# #### Whitebox and blackbox macros\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="annotations-macros"></a>\n# #### Annotations Macros\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="scala-xml"></a>\n# ### Scala XML\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n# <a name="scala-string"></a>\n# ### Scala String Processing\n# \n# WARNING: Not writed yet\n# TODO: write this topic.\n# \n-->   ',
id:"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2017-01-15-scala-tutorial/index.md absPath of file >>> MarkdownRemark",timeToRead:12,frontmatter:{date:"January 15, 2017",draft:!1,path:"/scala",tags:["Scala, Java & JVM"],title:"Scala Language Tutorial"}},{excerpt:"Overview over java9 Java 9 had released at September 2017. On this post you will found a global overview of the changes, and some useful links.  Complete change log - from Oracle Minor changes A new tool the  jsheel  - “interactive command-line…",html:'<h1 id="overview-over-java9"><a href="#overview-over-java9" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview over java9</h1>\n<p>Java 9 had released at September 2017. On this post you will found a global overview of the changes, and some useful links. </p>\n<p><a href="https://docs.oracle.com/javase/9/whatsnew/toc.html">Complete change log - from Oracle</a></p>\n<h2 id="minor-changes"><a href="#minor-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Minor changes</h2>\n<ul>\n<li>A new tool the <a href="https://www.youtube.com/watch?v=PHJ8-Ef1ZE4">jsheel</a> - “interactive command-line interface for evaluating declarations, statements, and expressions of the Java programming language.”</li>\n<li>Support private interface methods</li>\n<li>\n<p>Complete the removal, begun in Java SE 8, of the underscore from the set of legal identifier names.</p>\n<ul>\n<li>That means we currently could create a variable with name ’_’ ?</li>\n</ul>\n</li>\n<li>Collection methods: <code>Set.of(...), List.of(...), Map.of(...)</code> <a href="https://docs.oracle.com/javase/9/core/creating-immutable-lists-sets-and-maps.htm#JSCOR-GUID-202D195E-6E18-41F6-90C0-7423B2C9B381">doc here</a></li>\n<li><a href="http://openjdk.java.net/jeps/266">Concurrency updates</a>: An interoperable publish-subscribe framework, enhancements to theCompletableFuture API, and various other improvements.</li>\n</ul>\n<h2 id="big-news-jigsaw"><a href="#big-news-jigsaw" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Big news: Jigsaw</h2>\n<p>The project jigsaw have arrived with native java modularization</p>\n<p><a href="https://www.youtube.com/watch?v=Ks7J_qQVR7Y">Jigsaw 32min video</a></p>\n<ul>\n<li><a href="https://www.quora.com/What-benefits-will-the-new-Java-9-module-system-bring-compared-to-using-jars">Advantages of jigsaw</a>: “With Jigsaw I hope to restrict access to the modules so that only one or two classes are accessible outside module which will make the code more maintainable”</li>\n<li>The jigsaw doesn’t support versioning, <strong>It will not replace maven or sbt</strong>.</li>\n<li>For sbt users like me, we must wait to see what integration sbt will create for jigsaw (<a href="https://github.com/sbt/sbt/issues/3368">ticket</a>)</li>\n</ul>\n<p>Note that is possible to <strong>use java9 without noticing jigsaw</strong>, java will create a monolithic ‘unamed module’ for retro-compatibility,</p>\n<p>Thank you for your attention</p>',id:"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2017-12-15-java9-overview/index.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{date:"December 15, 2017",draft:!1,path:"/java9-overview",tags:["Scala, Java & JVM"],title:"Java 9 Overview"}}],tagName:"Scala, Java & JVM"}}}});
//# sourceMappingURL=path---tags-scala-java-jvm-7ba6a1c38e55da67089a.js.map