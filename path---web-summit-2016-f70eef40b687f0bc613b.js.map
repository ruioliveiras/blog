{"version":3,"sources":["webpack:///path---web-summit-2016-f70eef40b687f0bc613b.js","webpack:///./.cache/json/web-summit-2016.json"],"names":["webpackJsonp","496","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","excerpt","timeToRead","frontmatter","date","rawDate","path","tags","image","pathContext","prev","draft","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,uBAAAC,OAAA,kBAAyDC,gBAAmBC,GAAA,gIAAAC,KAAA,mmKAAAC,QAAA,+JAAAC,WAAA,EAAAC,aAAoiLC,KAAA,oBAAAC,QAAA,2BAAAJ,QAAA,uCAAAK,KAAA,mBAAAC,QAAAX,MAAA,kBAAAY,MAAA,QAA8LC,aAAgBC,MAAQT,QAAA,yPAAAD,KAAA,swMAA61MD,GAAA,qIAAAG,WAAA,EAAAC,aAAueC,KAAA,gBAAAO,OAAA,EAAAL,KAAA,gBAAAC,QAAAX,MAAA,iBAA8FgB,MAASX,QAAA,+PAAAD,KAAA,k2XAAkiSD,GAAA,kIAAAG,WAAA,EAAAC,aAAynHC,KAAA,mBAAAO,OAAA,EAAAL,KAAA,gBAAAC,MAAA,qBAAAX,MAAA","file":"path---web-summit-2016-f70eef40b687f0bc613b.js","sourcesContent":["webpackJsonp([242329255839005],{\n\n/***/ 496:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Rui Oliveiras - Blog\",\"author\":\"Rui Oliveiras\"}},\"markdownRemark\":{\"id\":\"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2016-11-15-web-summit/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1 id=\\\"web-summit-2016\\\"><a href=\\\"#web-summit-2016\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Web Summit 2016</h1>\\n<p>This year (2016) web summit was in Portugal (Lisbon). Was my first time in a conference like that.</p>\\n<p>I stay in a little Hotel called Hotel of Chile with 2 stars - in the <strong>room 404</strong> (nice number to be in a web conference).</p>\\n<p>On this three days i was selling the product where i’m working: <strong>Saas4saaS</strong> .</p>\\n<h2 id=\\\"the-pitch-of-saas4saas-was-something-like-that\\\"><a href=\\\"#the-pitch-of-saas4saas-was-something-like-that\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The pitch of Saas4saaS was something like that:</h2>\\n<blockquote>\\n<p>Saas4saas is a set of services to create software as a services.</p>\\n</blockquote>\\n<blockquote>\\n<p>You know what is software as a service, right?</p>\\n</blockquote>\\n<blockquote>\\n<p>So, imagine this:</p>\\n</blockquote>\\n<blockquote>\\n<p>You in one month build the MVP of your product.\\nOn this month you will concentrate on the core business of your product.</p>\\n</blockquote>\\n<blockquote>\\n<p>After in one day integrating with Saas4saaS, you will have all the secondary\\nstuff but important stuff.</p>\\n</blockquote>\\n<blockquote>\\n<p>Things like Subscriptions, Resources limitations over the plans, User integrations with facebook, google\\nAre Made but us.</p>\\n</blockquote>\\n<blockquote>\\n<p><strong>So In one month building your MVP plus one day integrating with Saas4saaS\\nYou have a professional product ready to market, ready to sell.</strong></p>\\n</blockquote>\\n<h2 id=\\\"pitch-results\\\"><a href=\\\"#pitch-results\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Pitch Results</h2>\\n<p>I think people like the idea and want this Saas4saaS. I will continue with more pilots tests and continue working.</p>\\n<h2 id=\\\"nice-things-that-i-have-seen-on-web-summit\\\"><a href=\\\"#nice-things-that-i-have-seen-on-web-summit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Nice things that i have seen on web summit.</h2>\\n<ul>\\n<li>A email client for desktop - people still work on this? ok..</li>\\n<li>A app to automatically choose what to wear, where i already see this?</li>\\n<li>A app which convert legancy software to browser (they convert the interface into html, and keep running the program on its beckend servers). They show me paint on the browser, it is usefull for example for medical software</li>\\n<li>The best startup ever: They make t-shirt with a swappable pocket in the front. “With the same t-shrt you can have a facebook pocket, a uber pocket, Twitter pocket - there are no limitations”   </li>\\n<li>“Ican” a nice app to manage our personal goals, even if the goal is to be President of United States.</li>\\n</ul>\\n<h2 id=\\\"conclusion\\\"><a href=\\\"#conclusion\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Conclusion</h2>\\n<p>  <strong>I think when we are in a place like web-summit we are not in Lisbon on in Dublin.\\nWe are in the world</strong></p>\",\"excerpt\":\"Web Summit 2016 This year (2016) web summit was in Portugal (Lisbon). Was my first time in a conference like that. I stay in a little Hotel called Hotel of…\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"December 15, 2016\",\"rawDate\":\"2016-12-15T23:36:56.503Z\",\"excerpt\":\"My experience in the Web Summit 2016\",\"path\":\"/web-summit-2016\",\"tags\":[],\"title\":\"Web Summit 2016\",\"image\":null}}},\"pathContext\":{\"prev\":{\"excerpt\":\"An h1 header Paragraphs are separated by a blank line. 2nd paragraph.  Italic ,  bold , and  monospace . Itemized lists\\nlook like: this one that one the other one Note that --- not considering the asterisk --- the actual text\\ncontent starts at…\",\"html\":\"<h1 id=\\\"an-h1-header\\\"><a href=\\\"#an-h1-header\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>An h1 header</h1>\\n<p>Paragraphs are separated by a blank line.</p>\\n<p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code>monospace</code>. Itemized lists\\nlook like:</p>\\n<ul>\\n<li>this one</li>\\n<li>that one</li>\\n<li>the other one</li>\\n</ul>\\n<p>Note that --- not considering the asterisk --- the actual text\\ncontent starts at 4-columns in.</p>\\n<blockquote>\\n<p>Block quotes are\\nwritten like so.</p>\\n<p>They can span multiple paragraphs,\\nif you like.</p>\\n</blockquote>\\n<p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all\\nin chapters 12—14”). Three dots … will be converted to an ellipsis.\\nUnicode is supported. ☺</p>\\n<h2 id=\\\"an-h2-header\\\"><a href=\\\"#an-h2-header\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>An h2 header</h2>\\n<p>Here’s a numbered list:</p>\\n<ol>\\n<li>first item</li>\\n<li>second item</li>\\n<li>third item</li>\\n</ol>\\n<p>Note again how the actual text starts at 4 columns in (4 characters\\nfrom the left side). Here’s a code sample:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code># Let me re-iterate ...\\nfor i in 1 .. 10 { do-something(i) }</code></pre>\\n      </div>\\n<p>As you probably guessed, indented 4 spaces. By the way, instead of\\nindenting the block, you can use delimited blocks, if you like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>define foobar() {\\n    print \\\"Welcome to flavor country!\\\";\\n}</code></pre>\\n      </div>\\n<p>(which makes copying &#x26; pasting easier). You can optionally mark the\\ndelimited block for Pandoc to syntax highlight it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> time\\n<span class=\\\"token comment\\\"># Quick, count to ten!</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># (but not *too* quick)</span>\\n    time<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span> i\\n</code></pre>\\n      </div>\\n<h3 id=\\\"an-h3-header\\\"><a href=\\\"#an-h3-header\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>An h3 header</h3>\\n<p>Now a nested list:</p>\\n<ol>\\n<li>\\n<p>First, get these ingredients:</p>\\n<ul>\\n<li>carrots</li>\\n<li>celery</li>\\n<li>lentils</li>\\n</ul>\\n</li>\\n<li>\\n<p>Boil some water.</p>\\n</li>\\n<li>\\n<p>Dump everything in the pot and follow\\nthis algorithm:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>find wooden spoon\\nuncover pot\\nstir\\ncover pot\\nbalance wooden spoon precariously on pot handle\\nwait 10 minutes\\ngoto first step (or shut off burner when done)</code></pre>\\n      </div>\\n<p>Do not bump wooden spoon or it will fall.</p>\\n</li>\\n</ol>\\n<p>Notice again how text always lines up on 4-space indents (including\\nthat last line which continues item 3 above).</p>\\n<p>Here’s a link to <a href=\\\"http://foo.bar\\\">a website</a>, to a <a href=\\\"local-doc.html\\\">local\\ndoc</a>, and to a <a href=\\\"#an-h2-header\\\">section heading in the current\\ndoc</a>. Here’s a footnote <sup id=\\\"fnref-1\\\"><a href=\\\"#fn-1\\\" class=\\\"footnote-ref\\\">1</a></sup>.</p>\\n<p>Tables can look like this:</p>\\n<p>size  material      color</p>\\n<hr>\\n<p>9     leather       brown\\n10    hemp canvas   natural\\n11    glass         transparent</p>\\n<p>Table: Shoes, their sizes, and what they’re made of</p>\\n<p>(The above is the caption for the table.) Pandoc also supports\\nmulti-line tables:</p>\\n<hr>\\n<p>keyword   text</p>\\n<hr>\\n<p>red       Sunsets, apples, and\\nother red or reddish\\nthings.</p>\\n<p>green     Leaves, grass, frogs\\nand other things it’s\\nnot easy being.</p>\\n<hr>\\n<p>A horizontal rule follows.</p>\\n<hr>\\n<p>Here’s a definition list:</p>\\n<p>apples\\n: Good for making applesauce.\\noranges\\n: Citrus!\\ntomatoes\\n: There’s no “e” in tomatoe.</p>\\n<p>Again, text is indented 4 spaces. (Put a blank line between each\\nterm/definition pair to spread things out more.)</p>\\n<p>Here’s a “line block”:</p>\\n<p>| Line one\\n|   Line too\\n| Line tree</p>\\n<p>and images can be specified like so:</p>\\n<p><img src=\\\"example-image.jpg\\\" alt=\\\"example image\\\" title=\\\"An exemplary image\\\"></p>\\n<p>Inline math equations go in like so: $\\\\omega = d\\\\phi / dt$. Display\\nmath should get its own line and be put in in double-dollarsigns:</p>\\n<p>$$I = \\\\int \\\\rho R^{2} dV$$</p>\\n<p>And note that you can backslash-escape any punctuation characters\\nwhich you wish to be displayed literally, ex.: `foo`, *bar*, etc.</p>\\n<div class=\\\"footnotes\\\">\\n<hr>\\n<ol>\\n<li id=\\\"fn-1\\\">\\n<p>Footnote text goes here.</p>\\n<a href=\\\"#fnref-1\\\" class=\\\"footnote-backref\\\">↩</a>\\n</li>\\n</ol>\\n</div>\",\"id\":\"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2016-01-10-example-post.md/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"July 10, 2015\",\"draft\":false,\"path\":\"/example-post\",\"tags\":[],\"title\":\"Example Post\"}},\"next\":{\"excerpt\":\"Runtime JVM Bytecode manipulation Java and Scala and other languages that compiles to JVM,  are more dynamic that you may thing . As you already know Java and Scala compiles to JVM Bytecode. And this bytecode that probably scares you\\nis easy that you…\",\"html\":\"<h1 id=\\\"runtime-jvm-bytecode-manipulation\\\"><a href=\\\"#runtime-jvm-bytecode-manipulation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Runtime JVM Bytecode manipulation</h1>\\n<p>Java and Scala and other languages that compiles to JVM, <strong>are more dynamic that you may thing</strong>.</p>\\n<p>As you already know Java and Scala compiles to JVM Bytecode. And this bytecode that probably scares you\\nis easy that you may thing. I will not explain it on this post, but lets take a look.</p>\\n<h2 id=\\\"jvm-bytecode-overview\\\"><a href=\\\"#jvm-bytecode-overview\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>JVM ByteCode Overview</h2>\\n<p>The Full spessification can be found on the <a href=\\\"https://docs.oracle.com/javase/specs/jvms/se8/html/\\\">Oracle, Chapter 2. The Structure of the Java Virtual Machine</a></p>\\n<ul>\\n<li>\\n<p>Each java class or scala class will create a <em>‘.class’</em> file.\\nNote, in Scala each Lamda function will create  each own .class file, this is just a trick of the Scala compiler.</p>\\n</li>\\n<li>\\n<p>A good way to understed the data releated to each ‘.class’ is with ASM:</p>\\n<ul>\\n<li>in the java ASM guide, go to section 2.1, Class / Structure  </li>\\n</ul>\\n</li>\\n<li>\\n<p>Primitive types and Reference types,</p>\\n<ul>\\n<li>in the JVM there exist two kind of types primitives and references.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Method Call Example\\nOriginal Code</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">m</span><span class=\\\"token punctuation\\\">(</span>Example a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">)</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ola\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The ASM code, you can generate something like this using ASMifier.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>mv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//stack [this]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// put the first argument in the stack</span>\\n<span class=\\\"token comment\\\">// stack:[this, &lt;1º argument>]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitLdcInsn<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ola\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack:[this, &lt;1º argument>, \\\"ola\\\"]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitMethodInsn<span class=\\\"token punctuation\\\">(</span>INVOKEVIRTUAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Example\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"get\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"(Ljava/lang/String;)Ljava/lang/Object;\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// will call method &lt;1º argument>.get(\\\"ola\\\")</span>\\n<span class=\\\"token comment\\\">// stack:[this, &lt;result of get method>]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitTypeInsn<span class=\\\"token punctuation\\\">(</span>CHECKCAST<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"java/lang/String\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitMethodInsn<span class=\\\"token punctuation\\\">(</span>INVOKEVIRTUAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Main\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"(Ljava/lang/String;)Ljava/lang/String;\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Stack: [&lt;the result of hello>]</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>Instantiate new Varible</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>mv<span class=\\\"token punctuation\\\">.</span>visitTypeInsn<span class=\\\"token punctuation\\\">(</span>NEW<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitInsn<span class=\\\"token punctuation\\\">(</span>DUP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// duplicate the top of the stack</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference  ]</span>\\n<span class=\\\"token comment\\\">// local variable access, the initialization was omitted</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference, localVariable2 ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference, localVariable2,  localVariable3 ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference, localVariable2,  localVariable3, localVariable4 ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitMethodInsn<span class=\\\"token punctuation\\\">(</span>INVOKESPECIAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"&lt;init>\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// call the constructor, the constructor is a special method called &lt;init></span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<h2 id=\\\"java-class-loader\\\"><a href=\\\"#java-class-loader\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Java class-loader</h2>\\n<p>How this ‘.class’ files with byte code inside are loaded by the JVM? The answer is by the <strong>classLoader.</strong></p>\\n<p>On any object, you can do <code>.getClass()</code> this is the runtime representation of the Class. An if you pay attention that <code>Class</code> object has a method <code>.getClassLoader()</code>.</p>\\n<p><a href=\\\"https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html\\\">ClassLoader in the oracle documentation</a></p>\\n<p>The most incredible thing is that you use custom class-loader to for example load <code>.jar</code> into your application in runtime <a href=\\\"https://docs.oracle.com/javase/7/docs/api/java/net/URLClassLoader.html%22%3EuriClassLoader\\\">URLClassLoader</a>. Or store your <code>.class</code> in a <a href=\\\"https://github.com/RGBz/aws-s3-class-loader\\\">S3 class loader</a></p>\\n<h2 id=\\\"bytecode-manipulation-tools\\\"><a href=\\\"#bytecode-manipulation-tools\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bytecode manipulation tools</h2>\\n<ul>\\n<li>\\n<p><strong>Java ASM</strong> <a href=\\\"http://asm.ow2.org\\\">http://asm.ow2.org</a> - it is very flexible you can do almost everything.\\nFrom change existing .class to create new .class, to just analysis the code.\\nIt has a nice <a href=\\\"http://download.forge.objectweb.org/asm/asm4-guide.pdf\\\">guide</a>.</p>\\n<p>Also it includes a tool (ASMifier) that inspect a class and generate the source\\ncode to create the provided class in runtime. This is very useful for debug proposes</p>\\n</li>\\n<li>\\n<p><strong>ByteBuddy</strong> <a href=\\\"http://bytebuddy.net/#/\\\">bytebuddy.net</a> - is a easy way to manipulate class.\\nIt is just possible to do some common use-cases, like for example fields manipulation, create mocks, proxies, etc..\\nIt has a very simple interface and does not require an understanding of Java byte code.</p>\\n</li>\\n<li>\\n<p>** Janino ** <a href=\\\"http://janino-compiler.github.io/janino/\\\">janino-compiler.github.io/janino/</a> - Janino is a ligth-weigh runtime Java compiler. It can create bytecode in runtime, you write a string with valid Java Code and Janino will create the bytecode.\\njanino does not implement all the Java features, but just the sufficient.\\nIt is way more easy to write Java code and compile it using Janino than create the same code with ASM.</p>\\n</li>\\n</ul>\\n<p>  The uses-cases of something like that are unlimited, use your imagination!!  </p>\",\"id\":\"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2017-02-10-jvm-bytecode/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":4,\"frontmatter\":{\"date\":\"January 10, 2017\",\"draft\":false,\"path\":\"/jvm-bytecode\",\"tags\":[\"Scala, Java & JVM\"],\"title\":\"JVM Bytecode\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---web-summit-2016-f70eef40b687f0bc613b.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Rui Oliveiras - Blog\",\"author\":\"Rui Oliveiras\"}},\"markdownRemark\":{\"id\":\"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2016-11-15-web-summit/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1 id=\\\"web-summit-2016\\\"><a href=\\\"#web-summit-2016\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Web Summit 2016</h1>\\n<p>This year (2016) web summit was in Portugal (Lisbon). Was my first time in a conference like that.</p>\\n<p>I stay in a little Hotel called Hotel of Chile with 2 stars - in the <strong>room 404</strong> (nice number to be in a web conference).</p>\\n<p>On this three days i was selling the product where i’m working: <strong>Saas4saaS</strong> .</p>\\n<h2 id=\\\"the-pitch-of-saas4saas-was-something-like-that\\\"><a href=\\\"#the-pitch-of-saas4saas-was-something-like-that\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The pitch of Saas4saaS was something like that:</h2>\\n<blockquote>\\n<p>Saas4saas is a set of services to create software as a services.</p>\\n</blockquote>\\n<blockquote>\\n<p>You know what is software as a service, right?</p>\\n</blockquote>\\n<blockquote>\\n<p>So, imagine this:</p>\\n</blockquote>\\n<blockquote>\\n<p>You in one month build the MVP of your product.\\nOn this month you will concentrate on the core business of your product.</p>\\n</blockquote>\\n<blockquote>\\n<p>After in one day integrating with Saas4saaS, you will have all the secondary\\nstuff but important stuff.</p>\\n</blockquote>\\n<blockquote>\\n<p>Things like Subscriptions, Resources limitations over the plans, User integrations with facebook, google\\nAre Made but us.</p>\\n</blockquote>\\n<blockquote>\\n<p><strong>So In one month building your MVP plus one day integrating with Saas4saaS\\nYou have a professional product ready to market, ready to sell.</strong></p>\\n</blockquote>\\n<h2 id=\\\"pitch-results\\\"><a href=\\\"#pitch-results\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Pitch Results</h2>\\n<p>I think people like the idea and want this Saas4saaS. I will continue with more pilots tests and continue working.</p>\\n<h2 id=\\\"nice-things-that-i-have-seen-on-web-summit\\\"><a href=\\\"#nice-things-that-i-have-seen-on-web-summit\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Nice things that i have seen on web summit.</h2>\\n<ul>\\n<li>A email client for desktop - people still work on this? ok..</li>\\n<li>A app to automatically choose what to wear, where i already see this?</li>\\n<li>A app which convert legancy software to browser (they convert the interface into html, and keep running the program on its beckend servers). They show me paint on the browser, it is usefull for example for medical software</li>\\n<li>The best startup ever: They make t-shirt with a swappable pocket in the front. “With the same t-shrt you can have a facebook pocket, a uber pocket, Twitter pocket - there are no limitations”   </li>\\n<li>“Ican” a nice app to manage our personal goals, even if the goal is to be President of United States.</li>\\n</ul>\\n<h2 id=\\\"conclusion\\\"><a href=\\\"#conclusion\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Conclusion</h2>\\n<p>  <strong>I think when we are in a place like web-summit we are not in Lisbon on in Dublin.\\nWe are in the world</strong></p>\",\"excerpt\":\"Web Summit 2016 This year (2016) web summit was in Portugal (Lisbon). Was my first time in a conference like that. I stay in a little Hotel called Hotel of…\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"December 15, 2016\",\"rawDate\":\"2016-12-15T23:36:56.503Z\",\"excerpt\":\"My experience in the Web Summit 2016\",\"path\":\"/web-summit-2016\",\"tags\":[],\"title\":\"Web Summit 2016\",\"image\":null}}},\"pathContext\":{\"prev\":{\"excerpt\":\"An h1 header Paragraphs are separated by a blank line. 2nd paragraph.  Italic ,  bold , and  monospace . Itemized lists\\nlook like: this one that one the other one Note that --- not considering the asterisk --- the actual text\\ncontent starts at…\",\"html\":\"<h1 id=\\\"an-h1-header\\\"><a href=\\\"#an-h1-header\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>An h1 header</h1>\\n<p>Paragraphs are separated by a blank line.</p>\\n<p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code>monospace</code>. Itemized lists\\nlook like:</p>\\n<ul>\\n<li>this one</li>\\n<li>that one</li>\\n<li>the other one</li>\\n</ul>\\n<p>Note that --- not considering the asterisk --- the actual text\\ncontent starts at 4-columns in.</p>\\n<blockquote>\\n<p>Block quotes are\\nwritten like so.</p>\\n<p>They can span multiple paragraphs,\\nif you like.</p>\\n</blockquote>\\n<p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all\\nin chapters 12—14”). Three dots … will be converted to an ellipsis.\\nUnicode is supported. ☺</p>\\n<h2 id=\\\"an-h2-header\\\"><a href=\\\"#an-h2-header\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>An h2 header</h2>\\n<p>Here’s a numbered list:</p>\\n<ol>\\n<li>first item</li>\\n<li>second item</li>\\n<li>third item</li>\\n</ol>\\n<p>Note again how the actual text starts at 4 columns in (4 characters\\nfrom the left side). Here’s a code sample:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code># Let me re-iterate ...\\nfor i in 1 .. 10 { do-something(i) }</code></pre>\\n      </div>\\n<p>As you probably guessed, indented 4 spaces. By the way, instead of\\nindenting the block, you can use delimited blocks, if you like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>define foobar() {\\n    print \\\"Welcome to flavor country!\\\";\\n}</code></pre>\\n      </div>\\n<p>(which makes copying &#x26; pasting easier). You can optionally mark the\\ndelimited block for Pandoc to syntax highlight it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code><span class=\\\"token keyword\\\">import</span> time\\n<span class=\\\"token comment\\\"># Quick, count to ten!</span>\\n<span class=\\\"token keyword\\\">for</span> i <span class=\\\"token keyword\\\">in</span> <span class=\\\"token builtin\\\">range</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token comment\\\"># (but not *too* quick)</span>\\n    time<span class=\\\"token punctuation\\\">.</span>sleep<span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0.5</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">print</span> i\\n</code></pre>\\n      </div>\\n<h3 id=\\\"an-h3-header\\\"><a href=\\\"#an-h3-header\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>An h3 header</h3>\\n<p>Now a nested list:</p>\\n<ol>\\n<li>\\n<p>First, get these ingredients:</p>\\n<ul>\\n<li>carrots</li>\\n<li>celery</li>\\n<li>lentils</li>\\n</ul>\\n</li>\\n<li>\\n<p>Boil some water.</p>\\n</li>\\n<li>\\n<p>Dump everything in the pot and follow\\nthis algorithm:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>find wooden spoon\\nuncover pot\\nstir\\ncover pot\\nbalance wooden spoon precariously on pot handle\\nwait 10 minutes\\ngoto first step (or shut off burner when done)</code></pre>\\n      </div>\\n<p>Do not bump wooden spoon or it will fall.</p>\\n</li>\\n</ol>\\n<p>Notice again how text always lines up on 4-space indents (including\\nthat last line which continues item 3 above).</p>\\n<p>Here’s a link to <a href=\\\"http://foo.bar\\\">a website</a>, to a <a href=\\\"local-doc.html\\\">local\\ndoc</a>, and to a <a href=\\\"#an-h2-header\\\">section heading in the current\\ndoc</a>. Here’s a footnote <sup id=\\\"fnref-1\\\"><a href=\\\"#fn-1\\\" class=\\\"footnote-ref\\\">1</a></sup>.</p>\\n<p>Tables can look like this:</p>\\n<p>size  material      color</p>\\n<hr>\\n<p>9     leather       brown\\n10    hemp canvas   natural\\n11    glass         transparent</p>\\n<p>Table: Shoes, their sizes, and what they’re made of</p>\\n<p>(The above is the caption for the table.) Pandoc also supports\\nmulti-line tables:</p>\\n<hr>\\n<p>keyword   text</p>\\n<hr>\\n<p>red       Sunsets, apples, and\\nother red or reddish\\nthings.</p>\\n<p>green     Leaves, grass, frogs\\nand other things it’s\\nnot easy being.</p>\\n<hr>\\n<p>A horizontal rule follows.</p>\\n<hr>\\n<p>Here’s a definition list:</p>\\n<p>apples\\n: Good for making applesauce.\\noranges\\n: Citrus!\\ntomatoes\\n: There’s no “e” in tomatoe.</p>\\n<p>Again, text is indented 4 spaces. (Put a blank line between each\\nterm/definition pair to spread things out more.)</p>\\n<p>Here’s a “line block”:</p>\\n<p>| Line one\\n|   Line too\\n| Line tree</p>\\n<p>and images can be specified like so:</p>\\n<p><img src=\\\"example-image.jpg\\\" alt=\\\"example image\\\" title=\\\"An exemplary image\\\"></p>\\n<p>Inline math equations go in like so: $\\\\omega = d\\\\phi / dt$. Display\\nmath should get its own line and be put in in double-dollarsigns:</p>\\n<p>$$I = \\\\int \\\\rho R^{2} dV$$</p>\\n<p>And note that you can backslash-escape any punctuation characters\\nwhich you wish to be displayed literally, ex.: `foo`, *bar*, etc.</p>\\n<div class=\\\"footnotes\\\">\\n<hr>\\n<ol>\\n<li id=\\\"fn-1\\\">\\n<p>Footnote text goes here.</p>\\n<a href=\\\"#fnref-1\\\" class=\\\"footnote-backref\\\">↩</a>\\n</li>\\n</ol>\\n</div>\",\"id\":\"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2016-01-10-example-post.md/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"July 10, 2015\",\"draft\":false,\"path\":\"/example-post\",\"tags\":[],\"title\":\"Example Post\"}},\"next\":{\"excerpt\":\"Runtime JVM Bytecode manipulation Java and Scala and other languages that compiles to JVM,  are more dynamic that you may thing . As you already know Java and Scala compiles to JVM Bytecode. And this bytecode that probably scares you\\nis easy that you…\",\"html\":\"<h1 id=\\\"runtime-jvm-bytecode-manipulation\\\"><a href=\\\"#runtime-jvm-bytecode-manipulation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Runtime JVM Bytecode manipulation</h1>\\n<p>Java and Scala and other languages that compiles to JVM, <strong>are more dynamic that you may thing</strong>.</p>\\n<p>As you already know Java and Scala compiles to JVM Bytecode. And this bytecode that probably scares you\\nis easy that you may thing. I will not explain it on this post, but lets take a look.</p>\\n<h2 id=\\\"jvm-bytecode-overview\\\"><a href=\\\"#jvm-bytecode-overview\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>JVM ByteCode Overview</h2>\\n<p>The Full spessification can be found on the <a href=\\\"https://docs.oracle.com/javase/specs/jvms/se8/html/\\\">Oracle, Chapter 2. The Structure of the Java Virtual Machine</a></p>\\n<ul>\\n<li>\\n<p>Each java class or scala class will create a <em>‘.class’</em> file.\\nNote, in Scala each Lamda function will create  each own .class file, this is just a trick of the Scala compiler.</p>\\n</li>\\n<li>\\n<p>A good way to understed the data releated to each ‘.class’ is with ASM:</p>\\n<ul>\\n<li>in the java ASM guide, go to section 2.1, Class / Structure  </li>\\n</ul>\\n</li>\\n<li>\\n<p>Primitive types and Reference types,</p>\\n<ul>\\n<li>in the JVM there exist two kind of types primitives and references.</li>\\n</ul>\\n</li>\\n<li>\\n<p>Method Call Example\\nOriginal Code</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">m</span><span class=\\\"token punctuation\\\">(</span>Example a<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">)</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ola\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>The ASM code, you can generate something like this using ASMifier.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>mv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//stack [this]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// put the first argument in the stack</span>\\n<span class=\\\"token comment\\\">// stack:[this, &lt;1º argument>]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitLdcInsn<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ola\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack:[this, &lt;1º argument>, \\\"ola\\\"]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitMethodInsn<span class=\\\"token punctuation\\\">(</span>INVOKEVIRTUAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Example\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"get\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"(Ljava/lang/String;)Ljava/lang/Object;\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// will call method &lt;1º argument>.get(\\\"ola\\\")</span>\\n<span class=\\\"token comment\\\">// stack:[this, &lt;result of get method>]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitTypeInsn<span class=\\\"token punctuation\\\">(</span>CHECKCAST<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"java/lang/String\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitMethodInsn<span class=\\\"token punctuation\\\">(</span>INVOKEVIRTUAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Main\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"(Ljava/lang/String;)Ljava/lang/String;\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Stack: [&lt;the result of hello>]</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>\\n<p>Instantiate new Varible</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scala\\\"><code>mv<span class=\\\"token punctuation\\\">.</span>visitTypeInsn<span class=\\\"token punctuation\\\">(</span>NEW<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitInsn<span class=\\\"token punctuation\\\">(</span>DUP<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// duplicate the top of the stack</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference  ]</span>\\n<span class=\\\"token comment\\\">// local variable access, the initialization was omitted</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference, localVariable2 ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference, localVariable2,  localVariable3 ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitVarInsn<span class=\\\"token punctuation\\\">(</span>ALOAD<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// stack: [newObjReference , newObjReference, localVariable2,  localVariable3, localVariable4 ]</span>\\nmv<span class=\\\"token punctuation\\\">.</span>visitMethodInsn<span class=\\\"token punctuation\\\">(</span>INVOKESPECIAL<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"com/Hello\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"&lt;init>\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// call the constructor, the constructor is a special method called &lt;init></span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<h2 id=\\\"java-class-loader\\\"><a href=\\\"#java-class-loader\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Java class-loader</h2>\\n<p>How this ‘.class’ files with byte code inside are loaded by the JVM? The answer is by the <strong>classLoader.</strong></p>\\n<p>On any object, you can do <code>.getClass()</code> this is the runtime representation of the Class. An if you pay attention that <code>Class</code> object has a method <code>.getClassLoader()</code>.</p>\\n<p><a href=\\\"https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html\\\">ClassLoader in the oracle documentation</a></p>\\n<p>The most incredible thing is that you use custom class-loader to for example load <code>.jar</code> into your application in runtime <a href=\\\"https://docs.oracle.com/javase/7/docs/api/java/net/URLClassLoader.html%22%3EuriClassLoader\\\">URLClassLoader</a>. Or store your <code>.class</code> in a <a href=\\\"https://github.com/RGBz/aws-s3-class-loader\\\">S3 class loader</a></p>\\n<h2 id=\\\"bytecode-manipulation-tools\\\"><a href=\\\"#bytecode-manipulation-tools\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Bytecode manipulation tools</h2>\\n<ul>\\n<li>\\n<p><strong>Java ASM</strong> <a href=\\\"http://asm.ow2.org\\\">http://asm.ow2.org</a> - it is very flexible you can do almost everything.\\nFrom change existing .class to create new .class, to just analysis the code.\\nIt has a nice <a href=\\\"http://download.forge.objectweb.org/asm/asm4-guide.pdf\\\">guide</a>.</p>\\n<p>Also it includes a tool (ASMifier) that inspect a class and generate the source\\ncode to create the provided class in runtime. This is very useful for debug proposes</p>\\n</li>\\n<li>\\n<p><strong>ByteBuddy</strong> <a href=\\\"http://bytebuddy.net/#/\\\">bytebuddy.net</a> - is a easy way to manipulate class.\\nIt is just possible to do some common use-cases, like for example fields manipulation, create mocks, proxies, etc..\\nIt has a very simple interface and does not require an understanding of Java byte code.</p>\\n</li>\\n<li>\\n<p>** Janino ** <a href=\\\"http://janino-compiler.github.io/janino/\\\">janino-compiler.github.io/janino/</a> - Janino is a ligth-weigh runtime Java compiler. It can create bytecode in runtime, you write a string with valid Java Code and Janino will create the bytecode.\\njanino does not implement all the Java features, but just the sufficient.\\nIt is way more easy to write Java code and compile it using Janino than create the same code with ASM.</p>\\n</li>\\n</ul>\\n<p>  The uses-cases of something like that are unlimited, use your imagination!!  </p>\",\"id\":\"C:/Users/ruioliveiras/Desktop/ruioliveiras.com/content/blog/2017-02-10-jvm-bytecode/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":4,\"frontmatter\":{\"date\":\"January 10, 2017\",\"draft\":false,\"path\":\"/jvm-bytecode\",\"tags\":[\"Scala, Java & JVM\"],\"title\":\"JVM Bytecode\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/web-summit-2016.json\n// module id = 496\n// module chunks = 242329255839005"],"sourceRoot":""}